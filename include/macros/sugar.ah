;-------------------------------------------------------------------------------
; sugar.ah - various useful macros.
;-------------------------------------------------------------------------------

;*** These are needed for mResMax and unions ***
Byte_size	EQU	1
Word_size	EQU	2
Dword_size	EQU	4
Qword_size	EQU	8

; *** Calculate maximum value and reserve it ***
%macro mResMax 1-*
%assign %$m %1_size
%rep %0
    %if %1_size > %$m
	%assign %$m %1_size
    %endif
    %rotate 1
%endrep
    RESB   %$m
%endmacro

; *** Declaring a union ***
%macro union 1
    struc %1
%push union
%endmacro

; Union member
%macro unimemb 1
%ifnctx union
    %error Not inside a union
%else
    %ifndef %$unionsize
        %assign %$unionsize 0
    %endif
    %if %1_size > %$unionsize
	%assign %$unionsize %1_size
    %endif
%endif
%endmacro

%macro endunion 0
%ifnctx union
    %error Unexpected 'endunion'
%else
    %ifndef %$unionsize
    	%error Zero union size (no members)
    %endif
    RESB   %$unionsize
    %pop
    endstruc
%endif
%endmacro


;*** Declare a pointer - until we add this to NASM.. ***
%define RESP RESD



;*** Start a procedure ***
%macro proc 1
%push proc
%1:
%endmacro

;*** End a procedure. Only checks context stack ***
%macro endp 0
%ifnctx proc
    %error Mismatched ENDP
%else
   %pop
%endif
%endmacro


;*** mpush/mpop pair ***
%macro mpush 1-*
%rep %0
		push	%1
%rotate 1
%endrep
%endmacro

%macro mpop 1-*
%rep %0
		pop	%1
%rotate 1
%endrep
%endmacro


;*** push immediate ***
%macro pushimm 1
%if %1<128
		push	byte %1
%else
		push	dword %1
%endif
%endmacro


;*** C-like prologue and epilogue ***
%macro prologue 0-1 
%push enter
		push	ebp
		mov	ebp,esp
%if %0 == 0
  %ifnum %$lc
    %if %$lc < 128
		sub	esp,byte %$lc
    %else
		sub	esp,%$lc
    %endif
  %endif
%elif %1 > 0
  %if %1 < 128
		sub	esp,byte %1
  %else
		sub	esp,%1
  %endif
%endif
%endmacro

%macro epilogue 0
%ifnctx enter
%error Mismatched EPILOGUE
%else
%pop
%endif
		mov	esp,ebp
		pop	ebp
%endmacro


; *** For declaring many GLOBAL procedures at the same time ***
%macro publicproc 1-*
%rep %0
    [GLOBAL %1 %+ :proc]
    %rotate 1
%endrep
%endmacro

; *** For declaring many GLOBAL data at the same time ***
%macro publicdata 1-*
%rep %0
    [GLOBAL %1 %+ :data]
    %rotate 1
%endrep
%endmacro


; *** For exporting many GLOBAL procedures at the same time ***
%macro exportproc 1-*
%rep %0
    [GLOBAL %1 %+ :export proc]
    %rotate 1
%endrep
%endmacro

; *** For exporting many GLOBAL data at the same time ***
%macro exportdata 1-*
%rep %0
    [GLOBAL %1 %+ :export data]
    %rotate 1
%endrep
%endmacro


; *** Declare external procedure ***
%macro externproc 1-*
%rep %0
    [EXTERN %1 %+ :proc]
    %rotate 1
%endrep
%endmacro

; *** Declare external data ***
%macro externdata 1-*
%rep %0
    [EXTERN %1 %+ :data]
    %rotate 1
%endrep
%endmacro

; *** Import the procedure ***
%macro importproc 1-*
%rep %0
    [EXTERN %1 %+ :import proc]
    %rotate 1
%endrep
%endmacro

; *** Import the data ***
%macro importdata 1-*
%rep %0
    [EXTERN %1 %+ :import data]
    %rotate 1
%endrep
%endmacro


; *** This macro simplifies using automatic 4-byte variables ***
%macro locals 1-*
%ifndef %$lc
    %assign %$lc 0
%endif
%rep %0
    %assign %$lc %$lc+4
    %xdefine %$%1 ebp-%$lc
    %rotate 1
%endrep
%endmacro

; *** For declaring any-size automatic variable ***
; Parameters: %1 - name, %2 - size.
%macro locauto 2
%ifndef %$lc
    %assign %$lc 0
%endif
    %assign %$lc %$lc+%2
    %xdefine %$%1 ebp-%$lc
%endmacro

; *** For referencing arguments that were put on the stack
%macro arg 1-*
%ifndef %$ac
    %assign %$ac 4
%endif
%rep %0
    %assign %$ac %$ac+4
    %xdefine %$%1 ebp+%$ac
    %rotate 1
%endrep
%endmacro

; *** For calling C-like functions (that accept parameters on the stack) ***
%macro Ccall 1-*
%if %0 > 1
    %rotate -1
    %rep %0-1
    %ifnum %1
	pushimm %1
    %else
    	push %1
    %endif
	%rotate -1
    %endrep
%endif
    call %1
%if %0 > 1
    add esp,byte 4*(%0-1)
%endif
%endmacro

; *** For declaring structure instances, nicer than AT ***
%macro instance 1
    istruc %1
    %define field(x,y) AT %1. %+ x, y
    %define member(x) AT %1. %+ x, DD x
%endmacro

; *** For declaring strings together with their sizes ***
%macro string 2
%1	DB	%2
%1_size	EQU	$-%1
%endmacro

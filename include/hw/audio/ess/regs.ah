;-------------------------------------------------------------------------------
;  regs.ah - ESS registers.
;-------------------------------------------------------------------------------


; DSP commands.  This unit handles MIDI and audio capabilities.
; The DSP can be reset, data/commands can be read or written to it,
; and it can generate interrupts.  Interrupts are generated for MIDI
; input or DMA completion.  They seem to have neglected the fact 
; that it would be nice to have a MIDI transmission complete interrupt.
; Worse, the DMA engine is half-duplex.  This means you need to do

%define ESS_ACMD_DAC8WRITE	0x10	; direct-mode 8-bit DAC write 
%define ESS_ACMD_DAC16WRITE	0x11	; direct-mode 16-bit DAC write 
%define ESS_ACMD_DMA8OUT	0x14	; 8-bit linear DMA output 
%define ESS_ACMD_DMA16OUT	0x15	; 16-bit linear DMA output 
%define ESS_ACMD_AUTODMA8OUT	0x1C	; auto-init 8-bit linear DMA output 
%define ESS_ACMD_AUTODMA16OUT	0x1D	; auto-init 16-bit linear DMA output 
%define ESS_ACMD_ADC8READ	0x20	; direct-mode 8-bit ADC read 
%define ESS_ACMD_ADC16READ	0x21	; direct-mode 16-bit ADC read 
%define ESS_ACMD_DMA8IN		0x24	; 8-bit linear DMA input 
%define ESS_ACMD_DMA16IN	0x25	; 16-bit linear DMA input 
%define ESS_ACMD_AUTODMA8IN	0x2C	; auto-init 8-bit linear DMA input 
%define ESS_ACMD_AUTODMA16IN	0x2D	; auto-init 16-bit linear DMA input 
%define ESS_ACMD_SETTIMECONST1	0x40	; set time constant (1MHz base) 
%define	ESS_ACMD_SETTIMECONST15	0x41	; set time constant (1.5MHz base) 
%define	ESS_ACMD_SETFILTER	0x42	; set filter clock independently 
%define ESS_ACMD_BLOCKSIZE	0x48	; set blk size for high speed xfer 

%define ESS_ACMD_DMA4OUT	0x74	; 4-bit ADPCM DMA output 
%define ESS_ACMD_DMA4OUTREF	0x75	; 4-bit ADPCM DMA output with ref 
%define ESS_ACMD_DMA2_6OUT	0x76	; 2.6-bit ADPCM DMA output 
%define ESS_ACMD_DMA2_6OUTREF	0x77	; 2.6-bit ADPCM DMA output with ref 
%define ESS_ACMD_DMA2OUT	0x7A	; 2-bit ADPCM DMA output 
%define ESS_ACMD_DMA2OUTREF	0x7B	; 2-bit ADPCM DMA output with ref 
%define ESS_ACMD_SILENCEOUT	0x80	; output a block of silence 
%define ESS_ACMD_START_AUTO_OUT	0x90	; start auto-init 8-bit DMA output 
%define ESS_ACMD_START_OUT	0x91	; start 8-bit DMA output 
%define ESS_ACMD_START_AUTO_IN	0x98	; start auto-init 8-bit DMA input 
%define ESS_ACMD_START_IN	0x99	; start 8-bit DMA input 

%define ESS_XCMD_SAMPLE_RATE	0xA1	; sample rate for Audio1 channel 
%define ESS_XCMD_FILTER_CLOCK	0xA2	; filter clock for Audio1 channel
%define ESS_XCMD_XFER_COUNTLO	0xA4	; 
%define ESS_XCMD_XFER_COUNTHI	0xA5	; 
%define ESS_XCMD_AUDIO_CTRL	0xA8	; 
%define	  ESS_AUDIO_CTRL_MONITOR	0x08	; 0=disable/1=enable 
%define	  ESS_AUDIO_CTRL_MONO		0x02	; 0=disable/1=enable 
%define	  ESS_AUDIO_CTRL_STEREO		0x01	; 0=disable/1=enable 
%define ESS_XCMD_PREAMP_CTRL	0xA9 	; 
%define	  ESS_PREAMP_CTRL_ENABLE	0x04

%define ESS_XCMD_IRQ_CTRL	0xB1	; legacy audio interrupt control 
%define   ESS_IRQ_CTRL_INTRA	0x00
%define   ESS_IRQ_CTRL_INTRB	0x04
%define   ESS_IRQ_CTRL_INTRC	0x08
%define   ESS_IRQ_CTRL_INTRD	0x0C
%define   ESS_IRQ_CTRL_MASK	0x10
%define   ESS_IRQ_CTRL_EXT	0x40
%define ESS_XCMD_DRQ_CTRL	0xB2	; audio DRQ control 
%define   ESS_DRQ_CTRL_DRQA	0x04
%define   ESS_DRQ_CTRL_DRQB	0x08
%define   ESS_DRQ_CTRL_DRQC	0x0C
%define   ESS_DRQ_CTRL_PU	0x10
%define   ESS_DRQ_CTRL_EXT	0x40
%define ESS_XCMD_VOLIN_CTRL	0xB4	; stereo input volume control 
%define ESS_1788_XCMD_AUDIO_CTRL0	0xB6
%define   ESS_CTRL0_SIGNED	0x00  
%define   ESS_CTRL0_UNSIGNED	0x80	
%define ESS_XCMD_AUDIO1_CTRL1	0xB7	; 
%define	  ESS_AUDIO1_CTRL1_FIFO_CONNECT	0x80	; 1=connected 
%define	  ESS_AUDIO1_CTRL1_FIFO_MONO    0x40    ; 0=stereo/1=mono 
%define	  ESS_AUDIO1_CTRL1_FIFO_SIGNED	0x20	; 0=unsigned/1=signed 
%define	  ESS_AUDIO1_CTRL1_FIFO_STEREO	0x08	; 0=mono/1=stereo 
%define	  ESS_AUDIO1_CTRL1_FIFO_SIZE	0x04	; 0=8-bit/1=16-bit 
%define ESS_XCMD_AUDIO1_CTRL2	0xB8	; 
%define	  ESS_AUDIO1_CTRL2_FIFO_ENABLE	0x01	; 0=disable/1=enable 
%define	  ESS_AUDIO1_CTRL2_DMA_READ	0x02	; 0=DMA write/1=DMA read 
%define	  ESS_AUDIO1_CTRL2_AUTO_INIT	0x04
%define	  ESS_AUDIO1_CTRL2_ADC_ENABLE	0x08	; 0=DAC mode/1=ADC mode 
%define	ESS_XCMD_DEMAND_CTRL	0xB9	; 
%define	  ESS_DEMAND_CTRL_SINGLE	0x00	; 1-byte transfers 
%define	  ESS_DEMAND_CTRL_DEMAND_2	0x01	; 2-byte transfers 
%define	  ESS_DEMAND_CTRL_DEMAND_4	0x02	; 4-byte transfers 

%define ESS_ACMD_ENABLE_EXT	0xC6	; enable ESS extension commands 
%define ESS_ACMD_DISABLE_EXT	0xC7	; enable ESS extension commands 

%define ESS_ACMD_PAUSE_DMA	0xD0	; pause DMA 
%define ESS_ACMD_ENABLE_SPKR	0xD1	; enable Audio1 DAC input to mixer 
%define ESS_ACMD_DISABLE_SPKR	0xD3	; disable Audio1 DAC input to mixer 
%define ESS_ACMD_CONT_DMA	0xD4	; continue paused DMA 
%define ESS_ACMD_SPKR_STATUS	0xD8	; return Audio1 DAC status: 
%define   ESS_SPKR_OFF	0x00
%define   ESS_SPKR_ON	0xFF
%define ESS_ACMD_VERSION	0xE1	; get version number 
%define ESS_ACMD_LEGACY_ID	0xE7	; get legacy ES688/ES1688 ID bytes 

%define ESS_MINRATE 4000
%define ESS_MAXRATE 44100

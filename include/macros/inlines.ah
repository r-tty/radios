;-------------------------------------------------------------------------------
; inlines.ah - some useful macros used as inline functions.
;-------------------------------------------------------------------------------

%ifndef _inlines_ah
%define _inlines_ah

; Copy ASCIIZ-string. Direction flag must be set.
; Optional parameters:
;  %1 - source (otherwise ESI must be set),
;  %2 - destination (otherwise EDI must be set),
;  %3 - length delimiter (otherwise ECX must be set),
%macro mStrCopy 0-3
%ifid %1
	mov	esi,%1
%endif
%ifid %2
	mov	edi,%2
%endif
%ifnum %3
	mov	ecx,%3
%endif
%%Loop:
	lodsb
	or	al,al
	jz	%%Done
	stosb
	loop	%%Loop
%%Done:
%endmacro


; Check if the argument is aligned on page boundary, if not - align.
%macro mAlignOnPage 1
	add	%1,PAGESIZE-1
	and	%1,~ADDR_OFSMASK
%endmacro

%endif


; Make a negative 32-bit errno from 16-bit positive error code in AX.
%macro mErrno 0
	cwde
	neg	eax
%endmacro


; Lock some control block (thus provide an exclusive access).
; Parameters:	%1 - control block address,
;		%2 - structure name.
%macro mLockCB 2
%define @addr %1
%define @lock %2.Lock
	lea	eax,[@addr+@lock]
	call	K_SemP
%endmacro


; Unlock the control block.
; Parameters:	%1 - control block address,
;		%2 - structure name.
%macro mUnlockCB 2
%define @addr %1
%define @lock %2.Lock
	lea	eax,[@addr+@lock]
	call	K_SemV
%endmacro

;-------------------------------------------------------------------------------
; parport.ah - parallel port definitions.
; Based upon the Linux code by Andrea Arcangeli.
;-------------------------------------------------------------------------------

%ifndef _parport_ah
%define _parport_ah

; Maximum of 8 ports per machine
PARPORT_MAX		EQU	8

; Magic numbers
PARPORT_IRQ_NONE	EQU	-1
PARPORT_DMA_NONE	EQU	-1
PARPORT_IRQ_AUTO	EQU	-2
PARPORT_DMA_AUTO	EQU	-2
PARPORT_DISABLE		EQU	-2
PARPORT_IRQ_PROBEONLY	EQU	-3

PARPORT_CTL_STROBE	EQU	1
PARPORT_CTL_AUTOFD	EQU	2
PARPORT_CTL_INIT	EQU	4
PARPORT_CTL_SELECT	EQU	8
PARPORT_CTL_INTEN	EQU	10h
PARPORT_CTL_DIRECTION	EQU	20h

PARPORT_ST_ERROR	EQU	8
PARPORT_ST_SELECT	EQU	10h
PARPORT_ST_PAPEROUT	EQU	20h
PARPORT_ST_ACK		EQU	40h
PARPORT_ST_BUSY		EQU	80h

; Type classes for Plug-and-Play probe
PARPORT_CLASS_LEGACY	EQU	0	; Non-IEEE1284 device
PARPORT_CLASS_PRINTER	EQU	1
PARPORT_CLASS_MODEM	EQU	2
PARPORT_CLASS_NET	EQU	3
PARPORT_CLASS_HDC	EQU	4	; Hard disk controller
PARPORT_CLASS_PCMCIA	EQU	5
PARPORT_CLASS_MEDIA	EQU	6	; Multimedia device
PARPORT_CLASS_FDC	EQU	7	; Floppy disk controller
PARPORT_CLASS_PORTS	EQU	8
PARPORT_CLASS_SCANNER	EQU	9
PARPORT_CLASS_DIGCAM	EQU	10
PARPORT_CLASS_OTHER	EQU	11	; Anything else
PARPORT_CLASS_UNSPEC	EQU	12	; No CLS field in ID

; The "modes" entry in parport is a bit field representing the following
; modes.
; Note that PARPORT_MODE_PCECPEPP is for the SMC EPP+ECP mode which is NOT
; 100% compatible with EPP.
PARPORT_MODE_PCSPP	EQU	1
PARPORT_MODE_PCPS2	EQU	2
PARPORT_MODE_PCEPP	EQU	4
PARPORT_MODE_PCECP	EQU	8
PARPORT_MODE_PCECPEPP	EQU	10h
PARPORT_MODE_PCECR	EQU	20h	; ECR Register Exists
PARPORT_MODE_PCECPPS2	EQU	40h


; --- Macros ---

; Register definitions
%macro PP_ECONTROL 1
	mov	dx,[%1+tPPdevParm.BasePortHi]
	add	dx,byte 2
%endmacro
%macro PP_CONFIGB 1
	mov	dx,[%1+tPPdevParm.BasePortHi]
	inc	dx
%endmacro
%macro PP_CONFIGA 1
	mov	dx,[%1+tPPdevParm.BasePortHi]
%endmacro
%macro PP_FIFO 1
	mov	dx,[%1+tPPdevParm.BasePortHi]
%endmacro
%macro PP_EPPDATA 1
	mov	dx,[%1+tPPdevParm.BasePort]
	add	dx,byte 4
%endmacro
%macro PP_EPPADDR 1
	mov	dx,[%1+tPPdevParm.BasePort]
	add	dx,byte 3
%endmacro
%macro PP_CONTROL 1
	mov	dx,[%1+tPPdevParm.BasePort]
	add	dx,byte 2
%endmacro
%macro PP_STATUS 1
	mov	dx,[%1+tPPdevParm.BasePort]
	inc	dx
%endmacro
%macro PP_DATA 1
	mov dx,[%1+tPPdevParm.BasePort]
%endmacro


; Write to EPP data port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Data.
%macro ParPort_WriteEPP 1-2
	PP_EPPDATA %1
%if %0==2
	mov	al,%2
%endif
	out	dx,al
%endmacro

; Read from EPP data port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadEPP 1
	PP_EPPDATA %1
	in	al,dx
%endmacro

; Read from CONFIG B port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadConfigB 1
	PP_CONFIGB %1
	in	al,dx
%endmacro

; Write to data port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Data.
%macro ParPort_WriteData 1-2
	PP_DATA %1
%if %0==2
	mov	al,%2
%endif
	out	dx,al
%endmacro

; Read from data port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadData 1
	PP_DATA %1
	in	al,dx
%endmacro

; Write to control port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Data.
%macro ParPort_WriteControl 1-2
	PP_CONTROL %1
%if %0==2
	mov	al,%2
%endif
	mov	[%1+tPPdevParm.Private+tPPprivate.CTR],al
	out	dx,al
%endmacro

; Write a masked value to control port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Mask,
;		%3 - Value.
%macro ParPort_WriteMaskControl 2-3
	PP_CONTROL %1
%if %0==3
	mov	ah,%3
%endif
	mov	al,[%1+tPPdevParm.Private+tPPprivate.CTR]
	and	al,~%2
	xor	al,ah
	out	dx,al
%endmacro

; Return stored value of control port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadControl 1
	mov	al,[%1+tPPdevParm.Private+tPPprivate.CTR]
%endmacro

; Write to status port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Data.
%macro ParPort_WriteStatus 1-2
	PP_STATUS %1
%if %0==2
	mov	al,%2
%endif
	out	dx,al
%endmacro

; Read from status port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadStatus 1
	PP_STATUS %1
	in	al,dx
%endmacro

; Write to ECONTROL port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Data.
%macro ParPort_WriteEControl 1-2
	PP_ECONTROL %1
%if %0==2
	mov	al,%2
%endif
	out	dx,al
%endmacro

; Read from ECONTROL port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadEControl 1
	PP_ECONTROL %1
	in	al,dx
%endmacro

; Write to FIFO port.
; Parameters:	%1 - PortStructAddr,
;		%2 - Data.
%macro ParPort_WriteFIFO 1-2
	PP_CONFIGA %1
%if %0==2
	mov	al,%2
%endif
	out	dx,al
%endmacro

; Read from FIFO port.
; Parameter:	%1 - PortStructAddr.
%macro ParPort_ReadFIFO 1
	PP_CONFIGA %1
	in	al,dx
%endmacro

%endif

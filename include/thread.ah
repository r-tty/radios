;-------------------------------------------------------------------------------
; thread.ah - definitions for scheduler and thread management.
;-------------------------------------------------------------------------------

%ifndef _thread_ah
%define _thread_ah

%include "sync.ah"
%include "cpu/fpu.ah"
%include "cpu/setjmp.ah"

; Thread states
THRSTATE_DEAD		EQU	0
THRSTATE_RUNNING	EQU	1
THRSTATE_READY		EQU	2
THRSTATE_STOPPED	EQU	3

THRSTATE_SEND		EQU	4
THRSTATE_RECEIVE	EQU	5
THRSTATE_REPLY		EQU	6

THRSTATE_STACK		EQU	7
THRSTATE_WAITTHREAD	EQU	8
THRSTATE_WAITPAGE	EQU	9

THRSTATE_SIGSUSPEND	EQU	10
THRSTATE_SIGWAITINFO	EQU	11
THRSTATE_NANOSLEEP	EQU	12
THRSTATE_MUTEX		EQU	13
THRSTATE_CONDVAR	EQU	14
THRSTATE_JOIN		EQU	15
THRSTATE_INTR		EQU	16
THRSTATE_SEM		EQU	17
THRSTATE_WAITCTX	EQU	18

THRSTATE_NET_SEND	EQU	19
THRSTATE_NET_REPLY	EQU	20

; Timeouts for different thread states
TIMEOUT_RECEIVE		EQU	1 << THRSTATE_RECEIVE
TIMEOUT_SEND		EQU	1 << THRSTATE_SEND
TIMEOUT_REPLY		EQU	1 << THRSTATE_REPLY
TIMEOUT_SIGSUSPEND	EQU	1 << THRSTATE_SIGSUSPEND
TIMEOUT_SIGWAITINFO	EQU	1 << THRSTATE_SIGWAITINFO
TIMEOUT_NANOSLEEP	EQU	1 << THRSTATE_NANOSLEEP
TIMEOUT_MUTEX		EQU	1 << THRSTATE_MUTEX
TIMEOUT_CONDVAR		EQU	1 << THRSTATE_CONDVAR
TIMEOUT_JOIN		EQU	1 << THRSTATE_JOIN
TIMEOUT_INTR		EQU	1 << THRSTATE_INTR
TIMEOUT_SEM		EQU	1 << THRSTATE_SEM

; Thread flags
TF_INTR_PENDING		EQU	10000h
TF_DETACHED		EQU	20000h
TF_THREADS_HOLD		EQU	100000h
TF_UNBLOCK_REQ		EQU	400000h
TF_ALIGN_FAULT		EQU	1000000h
TF_SSTEP		EQU	2000000h
TF_ALLOCED_STACK	EQU	4000000h
TF_NOMULTISIG		EQU	8000000h
TF_FROZEN		EQU	10000000h
TF_IOPRIV		EQU	80000000h

; Priority classes
THRPRCL_CRIT		EQU	1		; Real-time tasks (fixed priority)
THRPRCL_NORMAL		EQU	2		; Normal tasks (float priority)
THRPRCL_IDLE		EQU	3		; Idle tasks (fixed priority)

; Default and maximum priority value
THRPRVAL_DEFAULT	EQU	50
THRPRVAL_MAX		EQU	200

; Time quantums
THRQUANT_DEFAULT	EQU	5
THRQUANT_MIN		EQU	2

; Thread control block
struc tTCB
.PCB		RESD	1			; Process descriptor address
.TID		RESD	1			; Thread ID
.Priority	RESD	1			; Initial priority value
.CurrPriority	RESD	1			; Current priority value
.PrioClass	RESB	1			; Priority class
.State		RESB	1			; State
.IntPending	RESB	1			; Number of pending interrupts
.Reserved	RESB	1

.Next		RESD	1			; Thread list
.Prev		RESD	1

.ReadyNext	RESD	1			; Scheduler link
.ReadyPrev	RESD	1

.SemNext	RESD	1			; Semaphore link
.SemPrev	RESD	1

.SendReplyNext	RESD	1			; Send/reply queue
.SendReplyPrev	RESD	1

.RcvNext	RESD	1			; Receive queue
.RcvPrev	RESD	1

.ProcNext	RESD	1			; Process link
.ProcPrev	RESD	1

.SendBuf	RESD	1			; Send buffer address
.SendSize	RESD	1			; Number of bytes to send
.ReplyBuf	RESD	1			; Reply buffer address
.ReplySize	RESD	1			; Number of bytes to reply
.ConnDesc	RESD	1			; Connection descriptor address
.MsgStatus	RESD	1			; Message send status

.Entry		RESD	1			; Start entry point
.Stack		RESD	1			; Stack pointer
.KStack		RESD	1			; Kernel stack pointer
.TLS		RESD	1			; User address of TLS
.LastErrno	RESD	1			; Last error number (signed)

.Flags		RESD	1			; TF_* flags
.SemWait	RESD	1			; Semaphore wait count
.SigBlockMask	RESQ	1			; Signal blocking mask
.SigQueue	RESD	1			; Head of signal queue

.Ticks		RESD	1			; Ticks collected
.Quant		RESD	1			; Quantum count
.Count		RESD	1			; Current count (CPU usage)

.Preempt	RESD	1			; Preemptive flag
.Stamp		RESD	1			; Timestamp
.Lock		RESB	tSemaphore_size 	; To manipulate TCB safely

.DebugRegs	RESD	8			; DR0..DR7 values
.FPUstate	RESB	tFPUstate_size		; FPU state

.Context	RESB	tJmpBuf_size		; Context
endstruc


; Default kernel stack size
%define DFLTKSTACKSIZE	4096

; Macro sets AL to nonzero if thread is executed in user mode
; Also sets zero flag if in kernel mode.
%macro mCheckKernelMode 1
	mov	al,[%1+tStackFrame.ECS]
	and	al,3
%endmacro


; Macro for obtaining the address of current TCB (from kernel).
; We use the same technique that Linux: all user threads have the fixed
; size kernel stack. When a thread is being created, the address of
; its control block (TCB) is stored at the bottom of the kernel stack.
;
; Parameters: %1 - register to store the TCB address (EAX is default)
%macro mCurrThread 0-1
	mov	eax,-DFLTKSTACKSIZE
	and	eax,esp
%if %0 == 1
	mov	%1,[eax]
%else
	mov	eax,[eax]
%endif
%endmacro

%endif
